import("//build/config/rust.gni")

template("rust_target") {
  _target_name = target_name
  _crate_name = target_name
  if (defined(invoker.crate_name)) {
    _crate_name = invoker.crate_name
  }

  if (defined(invoker.output_dir) && invoker.output_dir != "") {
    # This is where the build target (.exe, .rlib, etc) goes.
    _output_dir = invoker.output_dir
  }

  # This is where the OUT_DIR environment variable points to when running a
  # build script and when compiling the build target, for consuming generated
  # files.
  if (defined(invoker.crate_root)) {
    _crate_root = invoker.crate_root
  } else if (invoker.target_type == "executable") {
    _crate_root = "src/main.rs"
  } else {
    _crate_root = "src/lib.rs"
  }

  _testonly = false
  if (defined(invoker.testonly)) {
    _testonly = invoker.testonly
  }
  if (defined(invoker.visibility)) {
    _visibility = invoker.visibility
  }

  _rustflags = []
  if (defined(invoker.rustflags)) {
    _rustflags += invoker.rustflags
  }
  # if (defined(invoker.features)) {
  #   foreach(i, invoker.features) {
  #     _rustflags += [ "--cfg=feature=\"${i}\"" ]
  #   }
  # }
  # _edition = "2021"
  # if (defined(invoker.edition)) {
  #   _edition = invoker.edition
  # }

  assert(!defined(configs))
  _configs = []
  # _configs = [ "//build/rust:edition_${_edition}" ]
  # _test_configs = []
  # if (invoker.target_type == "executable") {
  #   _configs += invoker.executable_configs
  # } else if (invoker.target_type == "rust_proc_macro") {
  #   _configs += invoker.proc_macro_configs
  #   _test_configs += [ "//build/rust:proc_macro_extern" ]
  # } else if (invoker.target_type == "shared_library") {
  #   _configs += invoker.shared_library_configs
  # } else {
  #   _configs += invoker.library_configs
  # }

  if (invoker.target_type == "rust_proc_macro") {
    _main_target_suffix = "${target_name}__proc_macro"
  } else {
    _main_target_suffix = "__rlib"
  }

  _deps = []
  if (defined(invoker.deps)) {
    _deps += invoker.deps
  }
  _public_deps = []
  if (defined(invoker.public_deps)) {
    _public_deps += invoker.public_deps
  }
  if (defined(invoker.aliased_deps)) {
    _aliased_deps = invoker.aliased_deps
  } else {
    _aliased_deps = {
    }
  }

  # We require that all source files are listed, even though this is
  # not a requirement for rustc. The reason is to ensure that tools
  # such as `gn deps` give the correct answer, and thus we trigger
  # the right test suites etc. on code change.
  # TODO(crbug.com/1256930) - verify this is correct
  assert(defined(invoker.sources), "sources must be listed")

  group(_target_name) {
    testonly = _testonly
    if (defined(_visibility)) {
      visibility = _visibility
    }
  }

  _rust_deps = _deps
  _rust_aliased_deps = _aliased_deps
  _rust_public_deps = _public_deps

  # You must go through the groups above to get to these targets.
  _visibility = []
  _visibility = [ ":${_target_name}" ]

  not_needed([
               "_crate_root",
               "_crate_name",
               "_rustc_metadata",
               "_test_configs",
             ])
  not_needed(invoker, [ "executable_configs" ])

  target(invoker.target_type, "${_target_name}${_main_target_suffix}") {
    forward_variables_from(invoker,
                           "*",
                           TESTONLY_AND_VISIBILITY + [
                                 "features",
                                 "deps",
                                 "aliased_deps",
                                 "public_deps",
                                 "rustflags",
                                 "rustenv",
                                 "configs",
                                 "unit_test_output_dir",
                                 "unit_test_target",
                                 "test_inputs",
                               ])

    testonly = _testonly
    visibility = _visibility
    crate_name = _crate_name
    crate_root = _crate_root
    configs = []
    configs = _configs
    deps = _rust_deps
    aliased_deps = _rust_aliased_deps
    public_deps = _rust_public_deps
    rustflags = _rustflags

    # The Rust tool() declarations, like C++ ones, use the output_name and
    # output_dir, so that GN targets can override these if needed. Here we
    # give them their default values, or allow them to be overridden.
    if (defined(_output_dir)) {
      output_dir = _output_dir
    }
  }
}
