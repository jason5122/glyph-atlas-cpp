config("compiler") {
  cflags = []
  cflags_c = []
  cflags_cc = []
  cflags_objc = []
  cflags_objcc = []
  ldflags = []
  defines = []
  configs = []

  if (is_mac) {
    configs += [ "//build/config/mac:compiler" ]
  }

  if (is_linux) {
    defines += [ "_GNU_SOURCE" ]
  }

  if (is_win) {
    cflags_c += [ "/std:c17" ]
    cflags_cc += [ "/std:c++20" ]
  } else {
    cflags_c += [ "-std=c17" ]
    cflags_cc += [ "-std=c++20" ]

    # TODO: Figure out why we need this.
    cflags_cc += [ "-fexperimental-library" ]
  }

  # Pass the same C/C++ flags to the Objective-C/C++ compiler.
  cflags_objc += cflags_c
  cflags_objcc += cflags_cc

  # if (!is_win) {
  #   ldflags = [ "-fuse-ld=lld" ]
  # }
}

config("default_include_dirs") {
  include_dirs = [
    "//",
    root_gen_dir,
  ]
}

config("optimize") {
  if (is_win) {
    # TODO: Verify these flags do what we want on Windows.
    cflags = [
      "/O2",
      "/Ob2",  # Both explicit and auto inlining.
      "/Oy-",  # Disable omitting frame pointers, must be after /O2.
      "/Zc:inline",  # Remove unreferenced COMDAT (faster links).
      "/Oi",
    ]
  } else {
    cflags = [ "-O2" ]

    # TODO: Consider moving LTO into a separate config.
    ldflags = [ "-flto=thin" ]
  }
}

config("no_optimize") {
  if (is_win) {
    # TODO: Verify these flags do what we want on Windows.
    cflags = [
      "/Od",  # Disable optimization.
      "/Ob0",  # Disable all inlining (on by default).
      "/GF",  # Enable string pooling (off by default).
    ]
  } else {
    cflags = [ "-O0" ]
  }
}

config("default_optimization") {
  if (is_release) {
    configs = [ ":optimize" ]
  } else {
    configs = [ ":no_optimize" ]
  }
}

config("no_exceptions") {
  if (is_win) {
    defines = [ "_HAS_EXCEPTIONS=0" ]
  } else {
    cflags_cc = [ "-fno-exceptions" ]
    cflags_objcc = cflags_cc
  }
}

config("no_rtti") {
  if (is_win) {
    cflags_cc = [ "/GR-" ]
  } else {
    cflags_cc = [ "-fno-rtti" ]
    cflags_objcc = cflags_cc
  }
}

config("simple_text_code") {
  cflags = []

  if (is_win) {
    cflags += [ "/W4" ]

    # Opt in to additional [[nodiscard]] on standard library methods.
    defines = [ "_HAS_NODISCARD" ]
  } else {
    cflags += [ "-Wall" ]
    cflags += [ "-Wextra" ]  # Clang-specific.
  }

  if (is_mac) {
    cflags_objc = [
      "-Wimplicit-retain-self",
      "-Wobjc-missing-property-synthesis",
    ]
    cflags_objcc = cflags_objc
  }

  cflags += [
    # Warn on missing break statements at the end of switch cases.
    # For intentional fallthrough, use [[fallthrough]].
    "-Wimplicit-fallthrough",

    # Warn on unnecessary extra semicolons outside of function definitions.
    "-Wextra-semi",

    # Warn on unreachable code, including unreachable breaks and returns.
    "-Wunreachable-code-aggressive",
  ]

  configs = [
    ":default_warnings",
    ":treat_warnings_as_errors",
  ]
}

config("no_simple_text_code") {
  # Lots of third-party libraries violate these warnings. Instead of suppressing them individually,
  # we just blanket suppress them here.
  cflags = [
    "-Wno-unused-variable",
    "-Wno-c++11-narrowing",
    "-Wno-unused-but-set-variable",
    "-Wno-misleading-indentation",
  ]

  configs = [ ":default_warnings" ]
}

# Collects all warning flags that are used by default.  This is used as a subconfig of both
# simple_text_code and no_simple_text_code.  This way these flags are guaranteed to appear on the
# compile command line after -Wall.
config("default_warnings") {
  cflags = []

  if (is_mac) {
    # When compiling Objective-C, warns if a method is used whose availability is newer than the
    # deployment target.
    cflags += [ "-Wunguarded-availability" ]
  }

  # Disable specific warnings.
  cflags += [
    "-Wno-missing-field-initializers",
    "-Wno-unused-parameter",
    "-Wno-unused-variable",
  ]
}

config("treat_warnings_as_errors") {
  if (is_win) {
    cflags = [ "/WX" ]
  } else {
    cflags = [ "-Werror" ]
    ldflags = [ "-Werror" ]
  }
}
