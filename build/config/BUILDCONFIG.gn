# =============================================================================
# PLATFORM SELECTION
# =============================================================================
if (target_os == "") {
  target_os = host_os
}
if (target_cpu == "") {
  target_cpu = host_cpu
}

if (current_cpu == "") {
  current_cpu = target_cpu
}
if (current_os == "") {
  current_os = target_os
}

# =============================================================================
# BUILD FLAGS
# =============================================================================
declare_args() {
  is_release = false
}

# =============================================================================
# OS DEFINITIONS
# =============================================================================
is_mac = target_os == "mac"
is_linux = target_os == "linux"
is_win = target_os == "win"

# =============================================================================
# TARGET DEFAULTS
# =============================================================================
default_compiler_configs = [
  "//build/config/compiler",
  "//build/config/compiler:default_include_dirs",
  "//build/config/compiler:default_optimization",
  "//build/config/compiler:default_warnings",
  "//build/config/compiler:no_exceptions",
  "//build/config/compiler:no_rtti",
  "//build/config/sanitizers:default_sanitizer_flags",
]

if (is_win) {
  default_compiler_configs += [
    "//build/config/win:unicode",
    "//build/config/win:lean_and_mean",
    "//build/config/win:nominmax",
    "//build/config/win:winver",
    "//build/config/win:static_crt",
    "//build/config/win:no_crt_deprecation_warnings",
  ]
}

if (is_release) {
  default_compiler_configs += [ "//build/config:release" ]
}

# Executable defaults.
default_executable_configs = default_compiler_configs

# Shared library and loadable module defaults (also for components in component
# mode).
default_shared_library_configs = default_compiler_configs

set_defaults("executable") {
  configs = default_compiler_configs
}
set_defaults("static_library") {
  configs = default_compiler_configs
}
set_defaults("shared_library") {
  configs = default_compiler_configs
}
set_defaults("source_set") {
  configs = default_compiler_configs
}

default_rust_proc_macro_configs =
    default_shared_library_configs + [ "//build/rust:proc_macro_extern" ]

set_defaults("rust_proc_macro") {
  configs = default_rust_proc_macro_configs
}

# A helper for forwarding testonly and visibility.
# Forwarding "*" does not include variables from outer scopes (to avoid copying
# all globals into each template invocation), so it will not pick up
# file-scoped or outer-template-scoped variables. Normally this behavior is
# desired, but "visibility" and "testonly" are commonly defined in outer scopes.
# Explicitly forwarding them in forward_variables_from() works around this
# nuance. See //build/docs/writing_gn_templates.md#using-forward_variables_from
TESTONLY_AND_VISIBILITY = [
  "testonly",
  "visibility",
]

set_default_toolchain("//build/toolchain/$target_os:clang")
