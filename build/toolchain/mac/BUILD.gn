import("//build/config/rust.gni")

toolchain("clang") {
  if (target_cpu == "arm64") {
    prefix = "/opt/homebrew/opt/llvm/bin"
  } else {
    # TODO: Don't hard code this.
    # Auto-detect common clang install paths, but allow the user to specify their own path.
    # prefix = "/usr/local/opt/llvm/bin"
    prefix = "/opt/homebrew/opt/llvm/bin"
  }

  cc = "${prefix}/clang"
  cxx = "${prefix}/clang++"
  ar = "${prefix}/llvm-ar"

  # TODO: Clean Rust stuff up.
  home_dir = getenv("HOME")
  rust_sysroot_absolute =
      "$home_dir/.local/share/rustup/toolchains/stable-aarch64-apple-darwin"
  rust_sysroot = get_path_info(rust_sysroot_absolute, "abspath")
  rust_sysroot_relative = rebase_path(rust_sysroot, root_build_dir)
  rustc_bin = "$rust_sysroot_relative/bin/rustc"
  rustc = "${rustc_bin}"
  rustc_wrapper = rebase_path("//build/rust/rustc_wrapper.py", root_build_dir)

  tool("link") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{frameworks}}"

    command = "$cxx {{ldflags}} -o {{output}} @$rspfile"
    description = "LINK {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ""
    output_prefix = ""
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}}"

    # Remove the output file first so that ar doesn't try to modify the existing file.
    command = "$ar {{arflags}} -r -c -s -D {{output}} @$rspfile"
    command = "rm -f {{output}} && $command"
    description = "AR {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{target_out_dir}}"
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{frameworks}}"

    command = "$cxx -dynamiclib {{ldflags}} -o {{output}} @$rspfile"
    description = "SOLINK {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ".dylib"
    output_prefix = "lib"
  }

  tool("cc") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    description = "CC {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    description = "CXX {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("objc") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{framework_dirs}} {{cflags}} {{cflags_objc}} -c {{source}} -o {{output}}"
    description = "OBJC {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("objcxx") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{framework_dirs}} {{cflags}} {{cflags_objcc}} -c {{source}} -o {{output}}"
    description = "OBJCXX {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("rust_staticlib") {
    libname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    rspfile = "$libname.rsp"
    depfile = "$libname.d"

    default_output_extension = ".a"
    output_prefix = "lib"
    default_output_dir = "{{root_out_dir}}"
    description = "RUST(STATICLIB) {{output}}"
    outputs = [ libname ]

    rspfile_content = "{{rustdeps}} {{externs}} SOURCES {{sources}}"
    command = "\"$python_path\" \"$rustc_wrapper\" --rustc=$rustc --depfile=$depfile --rsp=$rspfile -- -Clinker=\"$cxx\" $rustc_common_args --emit=dep-info=$depfile,link -o $libname LDFLAGS RUSTENV {{rustenv}}"
    rust_sysroot = rust_sysroot_relative
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
    description = "COPY {{source}} {{output}}"
  }

  tool("copy_bundle_data") {
    command = "rm -rf {{output}} && cp -a {{source}} {{output}}"
    description = "COPY_BUNDLE_DATA {{output}}"
  }
}
