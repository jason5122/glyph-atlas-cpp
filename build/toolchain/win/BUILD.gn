toolchain("clang") {
  cc = "clang"
  cxx = "clang++"
  ar = "llvm-ar"

  _tool_wrapper_path = "//build/toolchain/win/tool_wrapper.py"

  tool("link") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{frameworks}}"

    command = "$cxx {{ldflags}} -o {{output}} @$rspfile"
    description = "LINK {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ""
    output_prefix = ""
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}}"

    # Remove the output file first so that ar doesn't try to modify the existing file.
    command = "$ar {{arflags}} -r -c -s -D {{output}} @$rspfile"
    # command = "rm -f {{output}} && $command"
    description = "AR {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{target_out_dir}}"
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  # tool("solink") {
  #   rspfile = "{{output}}.rsp"
  #   rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{frameworks}}"

  #   command = "$cxx -dynamiclib {{ldflags}} -o {{output}} @$rspfile"
  #   description = "SOLINK {{output}}"

  #   outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
  #   default_output_dir = "{{root_out_dir}}"
  #   default_output_extension = ".dylib"
  #   output_prefix = "lib"
  # }

  tool("cc") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    description = "CC {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    description = "CXX {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("stamp") {
    command = "cmd /c type nul > \"{{output}}\""
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "\"$python_path\" $_tool_wrapper_path recursive-mirror {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
