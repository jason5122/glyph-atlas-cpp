toolchain("clang") {
  # cc = "clang-cl"
  cl = "clang-cl"
  link = "lld-link"

  # ar = "$link /lib"

  _tool_wrapper_path =
      rebase_path("//build/toolchain/win/tool_wrapper.py", root_build_dir)

  # _rm_path = rebase_path("//build/toolchain/win/rm.py", root_build_dir)

  tool("link") {
    exename = "{{output_dir}}/{{target_output_name}}{{output_extension}}"

    rspfile = "$exename.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{frameworks}}"

    command = "$link {{ldflags}} \"/OUT:$exename\" \"@$rspfile\""
    description = "LINK {{output}}"

    outputs = [ exename ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ".exe"
    output_prefix = ""
  }

  # TODO: Implement static library, shared library, and C compilation.
  # tool("alink") {
  #   rspfile = "{{output}}.rsp"
  #   rspfile_content = "{{inputs}}"

  #   # TODO: Don't hard code `python`.
  #   # Remove the output file first so that ar doesn't try to modify the existing file.
  #   command = "$ar {{arflags}} -r -c -s -D {{output}} @$rspfile"
  #   command = "cmd /c python $_rm_path \"{{output}}\" && $command"
  #   description = "AR {{output}}"

  #   outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
  #   default_output_dir = "{{target_out_dir}}"
  #   default_output_extension = ".a"
  #   output_prefix = "lib"
  # }

  # tool("solink") {
  #   rspfile = "{{output}}.rsp"
  #   rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{frameworks}}"

  #   command = "$cxx -dynamiclib {{ldflags}} -o {{output}} @$rspfile"
  #   description = "SOLINK {{output}}"

  #   outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
  #   default_output_dir = "{{root_out_dir}}"
  #   default_output_extension = ".dylib"
  #   output_prefix = "lib"
  # }

  # tool("cc") {
  #   depfile = "{{output}}.d"
  #   depsformat = "msvc"
  #   precompiled_header_type = "msvc"
  #   command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
  #   description = "CC {{output}}"
  #   outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.obj" ]
  # }

  tool("cxx") {
    # depfile = "{{output}}.d"
    depsformat = "msvc"
    precompiled_header_type = "msvc"

    # command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    command = "$cl /c {{source}} /Fo{{output}} /nologo /showIncludes:user {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
    description = "CXX {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.obj" ]
  }

  tool("stamp") {
    command = "cmd /c type nul > \"{{output}}\""
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "\"$python_path\" $_tool_wrapper_path recursive-mirror {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
