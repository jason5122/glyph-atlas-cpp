toolchain("clang") {
  cl = "clang-cl"
  link = "lld-link"
  lib = "$link /lib"

  _tool_wrapper_path =
      rebase_path("//build/toolchain/win/tool_wrapper.py", root_build_dir)

  tool("link") {
    exename = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    rspfile = "$exename.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{ldflags}}"

    command = "$link {{ldflags}} \"/OUT:$exename\" /nologo \"@$rspfile\""
    description = "LINK {{output}}"

    outputs = [ exename ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ".exe"
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}}"

    command = "$lib \"/OUT:{{output}}\" /nologo {{arflags}} \"@$rspfile\""
    description = "LIB {{output}}"

    # Ignore {{output_extension}} and always use .lib.
    # There's no reason to allow targets to override this extension on Windows.
    outputs = [ "{{output_dir}}/{{target_output_name}}.lib" ]
    default_output_dir = "{{target_out_dir}}"
    default_output_extension = ".lib"
  }

  tool("solink") {
    dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    libname = "${dllname}.lib"
    rspfile = "${dllname}.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{ldflags}}"

    command = "$link /DLL \"/OUT:$dllname\" /nologo \"/IMPLIB:$libname\" \"@$rspfile\""
    description = "LINK(DLL) {{output}}"

    outputs = [
      dllname,
      libname,
    ]
    link_output = libname
    depend_output = libname
    runtime_outputs = [ dllname ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ".dll"

    # Since the above commands only updates the .lib file when it changes, ask Ninja to check if
    # the timestamp actually changed to know if downstream dependencies should be recompiled.
    restat = true
  }

  tool("cc") {
    depsformat = "msvc"
    precompiled_header_type = "msvc"

    command = "$cl /c {{source}} /Fo{{output}} /nologo /showIncludes:user {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    description = "CC {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.obj" ]
  }

  tool("cxx") {
    depsformat = "msvc"
    precompiled_header_type = "msvc"

    command = "$cl /c {{source}} /Fo{{output}} /nologo /showIncludes:user {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
    description = "CXX {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.obj" ]
  }

  tool("stamp") {
    command = "cmd /c type nul > \"{{output}}\""
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "\"$python_path\" $_tool_wrapper_path recursive-mirror {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
