toolchain("clang") {
  cc = "clang"
  cxx = "clang++"
  ar = "llvm-ar"

  tool("link") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}}"

    command = "$cxx {{ldflags}} -o {{output}} @$rspfile"
    description = "LINK {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ""
    output_prefix = ""
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}}"

    # Remove the output file first so that ar doesn't try to modify the existing file.
    command = "$ar {{arflags}} -r -c -s -D {{output}} @$rspfile"
    command = "rm -f {{output}} && $command"
    description = "AR {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{target_out_dir}}"
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink_module") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}} {{libs}} {{solibs}}"

    command = "$cxx -shared {{ldflags}} -o {{output}} @$rspfile"
    description = "SOLINK_MODULE {{output}}"

    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_dir = "{{root_out_dir}}"
    default_output_extension = ".so"
    output_prefix = "lib"
  }

  tool("cc") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    description = "CC {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    depsformat = "gcc"
    precompiled_header_type = "gcc"
    command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    description = "CXX {{output}}"
    outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
    description = "COPY {{source}} {{output}}"
  }
}
