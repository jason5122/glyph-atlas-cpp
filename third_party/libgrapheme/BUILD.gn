static_library("libgrapheme") {
  # Due to GN's ordering, we set C99 this way instead of through `cflags_c` directly.
  # This sets C99 *after* the default compiler config. Using cflags_c sets C99 before the default.
  configs += [ "//build/config/compiler:c99" ]

  sources = [
    "src/bidirectional.c",
    "src/case.c",
    "src/character.c",
    "src/line.c",
    "src/sentence.c",
    "src/utf8.c",
    "src/util.c",
    "src/word.c",
  ]

  include_dirs = [ "$root_gen_dir/third_party/libgrapheme/gen" ]

  deps = [ ":generate_headers" ]
}

template("compile_tool") {
  executable(target_name) {
    forward_variables_from(invoker, "*", [ "deps" ])
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
    configs += [ "//build/config/compiler:c99" ]
    sources += [ "gen/util.c" ]

    output_dir = "$root_gen_dir/third_party/libgrapheme/gen"
  }
}

compile_tool("bidirectional") {
  sources = [ "gen/bidirectional.c" ]
}

compile_tool("case") {
  sources = [ "gen/case.c" ]
}

compile_tool("character") {
  sources = [ "gen/character.c" ]
}

compile_tool("line") {
  sources = [ "gen/line.c" ]
}

compile_tool("sentence") {
  sources = [ "gen/sentence.c" ]
}

compile_tool("word") {
  sources = [ "gen/word.c" ]
}

action_foreach("generate_headers") {
  script = "generate_headers.py"

  cmd_dir = rebase_path("$root_gen_dir/third_party/libgrapheme/gen")
  args = [
    "$cmd_dir/{{source_name_part}}",
    rebase_path(
        "$root_gen_dir/third_party/libgrapheme/gen/{{source_name_part}}.h",
        root_build_dir),
    rebase_path("$root_gen_dir/third_party/libgrapheme", root_build_dir),
  ]
  sources = [
    "gen/bidirectional.c",
    "gen/case.c",
    "gen/character.c",
    "gen/line.c",
    "gen/sentence.c",
    "gen/word.c",
  ]
  outputs =
      [ "$root_gen_dir/third_party/libgrapheme/gen/{{source_name_part}}.h" ]
  deps = [
    ":bidirectional",
    ":case",
    ":character",
    ":copy_unicode_data",
    ":line",
    ":sentence",
    ":word",
  ]
}

declare_args() {
  UNICODE_VERSION = "15.0.0"
}

copy("copy_unicode_data") {
  unicode_ucd_dir = "//third_party/unicode/ucd/$UNICODE_VERSION"
  sources = [
    "$unicode_ucd_dir/BidiBrackets.txt",
    "$unicode_ucd_dir/BidiMirroring.txt",
    "$unicode_ucd_dir/DerivedCoreProperties.txt",
    "$unicode_ucd_dir/EastAsianWidth.txt",
    "$unicode_ucd_dir/LineBreak.txt",
    "$unicode_ucd_dir/SpecialCasing.txt",
    "$unicode_ucd_dir/UnicodeData.txt",
    "$unicode_ucd_dir/auxiliary/GraphemeBreakProperty.txt",
    "$unicode_ucd_dir/auxiliary/SentenceBreakProperty.txt",
    "$unicode_ucd_dir/auxiliary/WordBreakProperty.txt",
    "$unicode_ucd_dir/emoji/emoji-data.txt",
    "$unicode_ucd_dir/extracted/DerivedBidiClass.txt",
  ]
  outputs =
      [ "$root_gen_dir/third_party/libgrapheme/data/{{source_file_part}}" ]
}
